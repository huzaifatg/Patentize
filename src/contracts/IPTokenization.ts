/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"IPTokenization","structs":{},"methods":[{"name":"create_application","args":[{"name":"asset_id","type":"asset"},{"name":"total_shares","type":"uint64"},{"name":"price_per_share","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"set_price","args":[{"name":"price_per_share","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"opt_in_to_asset","args":[{"name":"mbrpay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"buy_shares","args":[{"name":"buyerTxn","type":"pay"},{"name":"quantity","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"distribute_royalties","args":[{"name":"royaltyTxn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete_application","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}}],"state":{"schema":{"global":{"ints":4,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"available_shares":{"key":"YXZhaWxhYmxlX3NoYXJlcw==","keyType":"AVMString","valueType":"AVMUint64"},"ip_asset_id":{"key":"aXBfYXNzZXRfaWQ=","keyType":"AVMString","valueType":"AVMUint64"},"price_per_share":{"key":"cHJpY2VfcGVyX3NoYXJl","keyType":"AVMString","valueType":"AVMUint64"},"total_shares":{"key":"dG90YWxfc2hhcmVz","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the IpTokenization contract
 */
export type IpTokenizationArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(asset,uint64,uint64)void': {
      assetId: bigint
      totalShares: bigint | number
      pricePerShare: bigint | number
    }
    'set_price(uint64)void': {
      pricePerShare: bigint | number
    }
    'opt_in_to_asset(pay)void': {
      mbrpay: AppMethodCallTransactionArgument
    }
    'buy_shares(pay,uint64)void': {
      buyerTxn: AppMethodCallTransactionArgument
      quantity: bigint | number
    }
    'distribute_royalties(pay)void': {
      royaltyTxn: AppMethodCallTransactionArgument
    }
    'delete_application()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(asset,uint64,uint64)void': [assetId: bigint, totalShares: bigint | number, pricePerShare: bigint | number]
    'set_price(uint64)void': [pricePerShare: bigint | number]
    'opt_in_to_asset(pay)void': [mbrpay: AppMethodCallTransactionArgument]
    'buy_shares(pay,uint64)void': [buyerTxn: AppMethodCallTransactionArgument, quantity: bigint | number]
    'distribute_royalties(pay)void': [royaltyTxn: AppMethodCallTransactionArgument]
    'delete_application()void': []
  }
}

/**
 * The return type for each method
 */
export type IpTokenizationReturns = {
  'create_application(asset,uint64,uint64)void': void
  'set_price(uint64)void': void
  'opt_in_to_asset(pay)void': void
  'buy_shares(pay,uint64)void': void
  'distribute_royalties(pay)void': void
  'delete_application()void': void
}

/**
 * Defines the types of available calls and state of the IpTokenization smart contract.
 */
export type IpTokenizationTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(asset,uint64,uint64)void' | 'create_application', {
      argsObj: IpTokenizationArgs['obj']['create_application(asset,uint64,uint64)void']
      argsTuple: IpTokenizationArgs['tuple']['create_application(asset,uint64,uint64)void']
      returns: IpTokenizationReturns['create_application(asset,uint64,uint64)void']
    }>
    & Record<'set_price(uint64)void' | 'set_price', {
      argsObj: IpTokenizationArgs['obj']['set_price(uint64)void']
      argsTuple: IpTokenizationArgs['tuple']['set_price(uint64)void']
      returns: IpTokenizationReturns['set_price(uint64)void']
    }>
    & Record<'opt_in_to_asset(pay)void' | 'opt_in_to_asset', {
      argsObj: IpTokenizationArgs['obj']['opt_in_to_asset(pay)void']
      argsTuple: IpTokenizationArgs['tuple']['opt_in_to_asset(pay)void']
      returns: IpTokenizationReturns['opt_in_to_asset(pay)void']
    }>
    & Record<'buy_shares(pay,uint64)void' | 'buy_shares', {
      argsObj: IpTokenizationArgs['obj']['buy_shares(pay,uint64)void']
      argsTuple: IpTokenizationArgs['tuple']['buy_shares(pay,uint64)void']
      returns: IpTokenizationReturns['buy_shares(pay,uint64)void']
    }>
    & Record<'distribute_royalties(pay)void' | 'distribute_royalties', {
      argsObj: IpTokenizationArgs['obj']['distribute_royalties(pay)void']
      argsTuple: IpTokenizationArgs['tuple']['distribute_royalties(pay)void']
      returns: IpTokenizationReturns['distribute_royalties(pay)void']
    }>
    & Record<'delete_application()void' | 'delete_application', {
      argsObj: IpTokenizationArgs['obj']['delete_application()void']
      argsTuple: IpTokenizationArgs['tuple']['delete_application()void']
      returns: IpTokenizationReturns['delete_application()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        availableShares: bigint
        ipAssetId: bigint
        pricePerShare: bigint
        totalShares: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type IpTokenizationSignatures = keyof IpTokenizationTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type IpTokenizationNonVoidMethodSignatures = keyof IpTokenizationTypes['methods'] extends infer T ? T extends keyof IpTokenizationTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the IpTokenization smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends IpTokenizationSignatures> = IpTokenizationTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the IpTokenization smart contract to the method's return type
 */
export type MethodReturn<TSignature extends IpTokenizationSignatures> = IpTokenizationTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = IpTokenizationTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type IpTokenizationCreateCallParams =
  | Expand<CallParams<IpTokenizationArgs['obj']['create_application(asset,uint64,uint64)void'] | IpTokenizationArgs['tuple']['create_application(asset,uint64,uint64)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<IpTokenizationArgs['obj']['create_application(asset,uint64,uint64)void'] | IpTokenizationArgs['tuple']['create_application(asset,uint64,uint64)void']> & {method: 'create_application(asset,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type IpTokenizationDeleteCallParams =
  | Expand<CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']> & {method: 'delete_application'}>
  | Expand<CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']> & {method: 'delete_application()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type IpTokenizationDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: IpTokenizationCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: IpTokenizationDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the IpTokenization smart contract
 */
export abstract class IpTokenizationParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends IpTokenizationCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(asset,uint64,uint64)void':
            return IpTokenizationParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the IPTokenization smart contract using the create_application(asset,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<IpTokenizationArgs['obj']['create_application(asset,uint64,uint64)void'] | IpTokenizationArgs['tuple']['create_application(asset,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(asset,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.totalShares, params.args.pricePerShare],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends IpTokenizationDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_application':
          case 'delete_application()void':
            return IpTokenizationParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the IPTokenization smart contract using the delete_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_price(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPrice(params: CallParams<IpTokenizationArgs['obj']['set_price(uint64)void'] | IpTokenizationArgs['tuple']['set_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pricePerShare],
    }
  }
  /**
   * Constructs a no op call for the opt_in_to_asset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<IpTokenizationArgs['obj']['opt_in_to_asset(pay)void'] | IpTokenizationArgs['tuple']['opt_in_to_asset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrpay],
    }
  }
  /**
   * Constructs a no op call for the buy_shares(pay,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyShares(params: CallParams<IpTokenizationArgs['obj']['buy_shares(pay,uint64)void'] | IpTokenizationArgs['tuple']['buy_shares(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_shares(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyerTxn, params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the distribute_royalties(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRoyalties(params: CallParams<IpTokenizationArgs['obj']['distribute_royalties(pay)void'] | IpTokenizationArgs['tuple']['distribute_royalties(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distribute_royalties(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.royaltyTxn],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the IPTokenization smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class IpTokenizationFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `IpTokenizationFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new IpTokenizationClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new IpTokenizationClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the IPTokenization smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: IpTokenizationDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? IpTokenizationParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (IpTokenizationCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? IpTokenizationParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (IpTokenizationDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new IpTokenizationClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IPTokenization smart contract using the create_application(asset,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<IpTokenizationArgs['obj']['create_application(asset,uint64,uint64)void'] | IpTokenizationArgs['tuple']['create_application(asset,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(IpTokenizationParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the IPTokenization smart contract using the delete_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(IpTokenizationParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IPTokenization smart contract using the create_application(asset,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<IpTokenizationArgs['obj']['create_application(asset,uint64,uint64)void'] | IpTokenizationArgs['tuple']['create_application(asset,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(IpTokenizationParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IPTokenization smart contract using an ABI method call using the create_application(asset,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<IpTokenizationArgs['obj']['create_application(asset,uint64,uint64)void'] | IpTokenizationArgs['tuple']['create_application(asset,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(IpTokenizationParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | IpTokenizationReturns['create_application(asset,uint64,uint64)void']) }, appClient: new IpTokenizationClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the IPTokenization smart contract
 */
export class IpTokenizationClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `IpTokenizationClient`
   *
   * @param appClient An `AppClient` instance which has been created with the IpTokenization app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `IpTokenizationClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends IpTokenizationNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `IpTokenizationClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<IpTokenizationClient> {
    return new IpTokenizationClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `IpTokenizationClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<IpTokenizationClient> {
    return new IpTokenizationClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the IPTokenization smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.params.delete(IpTokenizationParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the IPTokenization smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPrice: (params: CallParams<IpTokenizationArgs['obj']['set_price(uint64)void'] | IpTokenizationArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IpTokenizationParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<IpTokenizationArgs['obj']['opt_in_to_asset(pay)void'] | IpTokenizationArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IpTokenizationParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `buy_shares(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyShares: (params: CallParams<IpTokenizationArgs['obj']['buy_shares(pay,uint64)void'] | IpTokenizationArgs['tuple']['buy_shares(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IpTokenizationParamsFactory.buyShares(params))
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `distribute_royalties(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeRoyalties: (params: CallParams<IpTokenizationArgs['obj']['distribute_royalties(pay)void'] | IpTokenizationArgs['tuple']['distribute_royalties(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IpTokenizationParamsFactory.distributeRoyalties(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the IPTokenization smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(IpTokenizationParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the IPTokenization smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPrice: (params: CallParams<IpTokenizationArgs['obj']['set_price(uint64)void'] | IpTokenizationArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IpTokenizationParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<IpTokenizationArgs['obj']['opt_in_to_asset(pay)void'] | IpTokenizationArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IpTokenizationParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `buy_shares(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyShares: (params: CallParams<IpTokenizationArgs['obj']['buy_shares(pay,uint64)void'] | IpTokenizationArgs['tuple']['buy_shares(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IpTokenizationParamsFactory.buyShares(params))
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `distribute_royalties(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeRoyalties: (params: CallParams<IpTokenizationArgs['obj']['distribute_royalties(pay)void'] | IpTokenizationArgs['tuple']['distribute_royalties(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IpTokenizationParamsFactory.distributeRoyalties(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the IPTokenization smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(IpTokenizationParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | IpTokenizationReturns['delete_application()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the IPTokenization smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPrice: async (params: CallParams<IpTokenizationArgs['obj']['set_price(uint64)void'] | IpTokenizationArgs['tuple']['set_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IpTokenizationParamsFactory.setPrice(params))
      return {...result, return: result.return as unknown as (undefined | IpTokenizationReturns['set_price(uint64)void'])}
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<IpTokenizationArgs['obj']['opt_in_to_asset(pay)void'] | IpTokenizationArgs['tuple']['opt_in_to_asset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IpTokenizationParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | IpTokenizationReturns['opt_in_to_asset(pay)void'])}
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `buy_shares(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyShares: async (params: CallParams<IpTokenizationArgs['obj']['buy_shares(pay,uint64)void'] | IpTokenizationArgs['tuple']['buy_shares(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IpTokenizationParamsFactory.buyShares(params))
      return {...result, return: result.return as unknown as (undefined | IpTokenizationReturns['buy_shares(pay,uint64)void'])}
    },

    /**
     * Makes a call to the IPTokenization smart contract using the `distribute_royalties(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeRoyalties: async (params: CallParams<IpTokenizationArgs['obj']['distribute_royalties(pay)void'] | IpTokenizationArgs['tuple']['distribute_royalties(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IpTokenizationParamsFactory.distributeRoyalties(params))
      return {...result, return: result.return as unknown as (undefined | IpTokenizationReturns['distribute_royalties(pay)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new IpTokenizationClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current IPTokenization app
   */
  state = {
    /**
     * Methods to access global state for the current IPTokenization app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          availableShares: result.available_shares,
          ipAssetId: result.ip_asset_id,
          pricePerShare: result.price_per_share,
          totalShares: result.total_shares,
        }
      },
      /**
       * Get the current value of the available_shares key in global state
       */
      availableShares: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("availableShares")) as bigint | undefined },
      /**
       * Get the current value of the ip_asset_id key in global state
       */
      ipAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ipAssetId")) as bigint | undefined },
      /**
       * Get the current value of the price_per_share key in global state
       */
      pricePerShare: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pricePerShare")) as bigint | undefined },
      /**
       * Get the current value of the total_shares key in global state
       */
      totalShares: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalShares")) as bigint | undefined },
    },
  }

  public newGroup(): IpTokenizationComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_price(uint64)void method call against the IPTokenization contract
       */
      setPrice(params: CallParams<IpTokenizationArgs['obj']['set_price(uint64)void'] | IpTokenizationArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_to_asset(pay)void method call against the IPTokenization contract
       */
      optInToAsset(params: CallParams<IpTokenizationArgs['obj']['opt_in_to_asset(pay)void'] | IpTokenizationArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buy_shares(pay,uint64)void method call against the IPTokenization contract
       */
      buyShares(params: CallParams<IpTokenizationArgs['obj']['buy_shares(pay,uint64)void'] | IpTokenizationArgs['tuple']['buy_shares(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyShares(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a distribute_royalties(pay)void method call against the IPTokenization contract
       */
      distributeRoyalties(params: CallParams<IpTokenizationArgs['obj']['distribute_royalties(pay)void'] | IpTokenizationArgs['tuple']['distribute_royalties(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRoyalties(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the IPTokenization contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as IpTokenizationComposer
  }
}
export type IpTokenizationComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPrice(params?: CallParams<IpTokenizationArgs['obj']['set_price(uint64)void'] | IpTokenizationArgs['tuple']['set_price(uint64)void']>): IpTokenizationComposer<[...TReturns, IpTokenizationReturns['set_price(uint64)void'] | undefined]>

  /**
   * Calls the opt_in_to_asset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<IpTokenizationArgs['obj']['opt_in_to_asset(pay)void'] | IpTokenizationArgs['tuple']['opt_in_to_asset(pay)void']>): IpTokenizationComposer<[...TReturns, IpTokenizationReturns['opt_in_to_asset(pay)void'] | undefined]>

  /**
   * Calls the buy_shares(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyShares(params?: CallParams<IpTokenizationArgs['obj']['buy_shares(pay,uint64)void'] | IpTokenizationArgs['tuple']['buy_shares(pay,uint64)void']>): IpTokenizationComposer<[...TReturns, IpTokenizationReturns['buy_shares(pay,uint64)void'] | undefined]>

  /**
   * Calls the distribute_royalties(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRoyalties(params?: CallParams<IpTokenizationArgs['obj']['distribute_royalties(pay)void'] | IpTokenizationArgs['tuple']['distribute_royalties(pay)void']>): IpTokenizationComposer<[...TReturns, IpTokenizationReturns['distribute_royalties(pay)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the IPTokenization smart contract using the delete_application()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<IpTokenizationArgs['obj']['delete_application()void'] | IpTokenizationArgs['tuple']['delete_application()void']>): IpTokenizationComposer<[...TReturns, IpTokenizationReturns['delete_application()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the IPTokenization smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): IpTokenizationComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): IpTokenizationComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<IpTokenizationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<IpTokenizationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<IpTokenizationComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<IpTokenizationComposerResults<TReturns>>
}
export type IpTokenizationComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>
